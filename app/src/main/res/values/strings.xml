<resources>
    <string name="app_name">Mini_Project</string>


    <string name="topics_tv1">Android \nIntroduction</string>
    <string name="topics_tv2">Android\nArchitecture</string>
    <string name="topics_tv3">Android\n IDE</string>
    <string name="topics_tv4">Android\nComponents</string>
    <string name="topics_tv5">Manifest\nFile</string>
    <string name="topics_tv6">Activities</string>
    <string name="topics_tv7">Fragment</string>
    <string name="topics_tv8">Android\nIntent</string>
    <string name="topics_tv9">Services</string>
    <string name="topics_tv10">Resources</string>
    <string name="topics_tv11">UI \n Layouts</string>
    <string name="topics_tv12">UI \n Widgets</string>
    <string name="topics_tv13">Android \nMenu</string>
    <string name="topics_tv14">Broadcast\nReceivers</string>
    <string name="topics_tv15">Content\nProvider</string>
    <string name="topics_tv16">Containers</string>
    <string name="topics_tv17">Data\nStorage</string>
    <string name="topics_tv18">JASON\nParsing</string>


    <string name="introduction_tv1">Introduction</string>
    <string name="introduction_tv2">      Android is a Linux based operating system. It is designed primarily for touch screen mobile devices such as tablet computers and smartphones. The android operating system has developed more in last 15 years starting from black and white phones to recent smartphones or mini computers. \n\n     The android is a powerful operating system and it supports large number of applications in Smartphones and other supportable devices. These applications are more comfortable and advanced for the users. The hardware that supports android software is based on ARM architecture platform.\n\n      The android is an open source operating system it means no license, distribution and development fee and any one can use it. The android has got millions of apps available that can help you managing your life easily and it is available in low prices in market that why android is very popular.\n\n      The android development supports with the full java programming language. Even other packages that are API and JSE are not supported. The first version 1.0 of software development kit (SDK) was released in 2008 and latest updated version is 9.0 with code name of Pie.</string>
    <string name="introduction_tv3">History of Android</string>
    <string name="introduction_tv4">      The code names of android are from A to P at present, such as Aestro, Blender, Cupcake, Donut, Eclair, Froyo, Gingerbread, Honeycomb, Ice Cream Sandwitch, Jelly Bean, KitKat, Lollipop, Marshmallow, Nougat, Oreo and Pie. Let\'s understand the android history below. \n\nAndy Rubin founded Android Incorporation in Palo Alto, California, United States in October, 2003.\n\nGoogle acquired android Incorporation in 17th August 2005. Since then, it is in the subsidiary of Google Incorporation.\n\nThe key employees of Android Incorporation are Andy Rubin, Rich Miner, Chris White and Nick Sears.\n\nAndroid is the nick name of Andy Rubin given by coworkers because of his love to robots. Google announces the development of android OS in 2007.\nThe first phone released that ran the Android OS which is T-Mobile G1.HTC launched the first android mobile in 2008.</string>
    <string name="introduction_tv5">Features of Android</string>
    <string name="introduction_tv6">      As Android is open source and freely available to manufacturers for customization, there are no fixed hardware and software configurations.\n\nHowever, Android itself supports the following features:\n   1. Storage — Uses SQLite, a lightweight relational database, for data storage.\n  2. Connectivity — Supports GSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth (includes A2DP and AVRCP), WiFi, LTE, and WiMAX.\n    3. Messaging — Supports both SMS and MMS.\n  4. Web browser — Based on the open-source WebKit, together with Chrome’s V8 JavaScript engine.\n  5. Media support — Includes support for the following media: H.263, H.264 (in 3GP or MP4 container), MPEG-4 SP, AMR, AMR-WB (in 3GP container), AAC, HE-AAC (in MP4 or 3GP container), MP3, MIDI, Ogg Vorbis, WAV, JPEG, PNG, GIF, and BMP.\n  6. Hardware support — Accelerometer Sensor, Camera, Digital Compass, Proximity Sensor, and GPS Multi.\n  7. Multi-touch — Supports multi-touch screens Multi.\n  8. Multi-tasking — Supports multi-tasking applications.\n  9. Flash support — Android 2.3 supports Flash 10.1.\n  10. Tethering — Supports sharing of Internet connections as a wired/wireless hotspot.</string>
    <string name="introduction_tv7">History of Android</string>


    <string name="architecture_tv1">Android Architecture or Android Software Stack</string>
    <string name="architecture_tv2">Linux kernel</string>
    <string name="architecture_tv3">      The android uses the powerful Linux kernel and it supports wide range of hardware drivers. The kernel is the heart of the operating system that manages input and output requests from software. This provides basic system functionalities like process management, memory management, device management like camera, keypad, display etc the kernel handles all the things. The Linux is really good at networking and it is not necessary to interface it to the peripheral hardware. The kernel itself does not interact directly with the user but rather interacts with the shell and other programs as well as with the hard ware devices on the system.</string>
    <string name="architecture_tv4">Android Libraries</string>
    <string name="architecture_tv5">      In addition to a set of standard Java development libraries (providing support for such general purpose tasks as string handling, networking and file manipulation), the Android development environment also includes the Android Libraries. These are a set of Java-based libraries that are specific to Android development. Examples of libraries in this category include the application framework libraries in addition to those that facilitate user interface building, graphics drawing and database access.\n\nA summary of some key core Android libraries available to the Android developer is as follows:</string>
    <string name="architecture_tv6">      1. android.app – Provides access to the application model and is the cornerstone of all Android applications.\n\n    2. android.content – Facilitates content access, publishing and messaging between applications and application components.\n\n    3.android.database – Used to access data published by content providers and includes SQLite database management classes.\n\n    4. android.graphics – A low-level 2D graphics drawing API including colors, points, filters, rectangles and canvases.\n\n    5. android.hardware – Presents an API providing access to hardware such as the accelerometer and light sensor.\n\n  6. android.opengl – A Java interface to the OpenGL ES 3D graphics rendering API.\n\n    7.android.os – Provides applications with access to standard operating system services including messages, system services and inter-process communication.\n\n    8. android.media – Provides classes to enable playback of audio and video.\n\n   9. android.net – A set of APIs providing access to the network stack. Includes android.net.wifi, which provides access to the device’/s wireless stack.\n\n  10. android.print – Includes a set of classes that enable content to be sent to configured printers from within Android applications.\n\n   11. android.provider – A set of convenience classes that provide access to standard Android content provider databases such as those maintained by the calendar and contact applications.\n\n   12.android.text – Used to render and manipulate text on a device display.\n\n  13. android.util – A set of utility classes for performing tasks such as string and number conversion, XML handling and date and time manipulation.\n\n    14. android.view – The fundamental building blocks of application user interfaces.\n\n   15. android.widget - A rich collection of pre-built user interface components such as buttons, labels, list views, layout managers, radio buttons etc.\n\n      Having covered the Java-based libraries in the Android runtime, it is now time to turn our attention to the C/C++ based libraries contained in this layer of the Android software stack.</string>
    <string name="architecture_tv7">C/C++ Libraries</string>
    <string name="architecture_tv8">      The Android runtime core libraries outlined in the preceding section are Java-based and provide the primary APIs for developers writing Android applications. It is important to note, however, that the core libraries do not perform much of the actual work and are, in fact, essentially Java “wrappers” around a set of C/C++ based libraries. When making calls, for example, to the android.opengl library to draw 3D graphics on the device display, the library actually ultimately makes calls to the OpenGL ES C++ library which, in turn, works with the underlying Linux kernel to perform the drawing tasks.\n\n      C/C++ libraries are included to fulfill a wide and diverse range of functions including 2D and 3D graphics drawing, Secure Sockets Layer (SSL) communication, SQLite database management, audio and video playback, bitmap and vector font rendering, display subsystem and graphic layer management and an implementation of the standard C system library (libc).\n\n     In practice, the typical Android application developer will access these libraries solely through the Java based Android core library APIs. In the event that direct access to these libraries is needed, this can be achieved using the Android Native Development Kit (NDK), the purpose of which is to call the native methods of non-Java or Kotlin programming languages (such as C and C++) from within Java code using the Java Native Interface (JNI).</string>
    <string name="architecture_tv9">Android runtime</string>
    <string name="architecture_tv10">      At the same layer as the libraries, the Android runtime provides a set of core libraries that enable developers to write Android apps using the Java programming language. The Android runtime also includes the Dalvik virtual machine, which enables every Android application to run in its own process, with its own instance of the Dalvik virtual machine (Android applications are compiled into the Dalvik executables). Dalvik is a specialized virtual machine designed specifically for Android and optimized for battery-powered mobile devices with limited memory and CPU.</string>
    <string name="architecture_tv11">Android Framework</string>
    <string name="architecture_tv12">      The Application Framework is a set of services that collectively form the environment in which Android applications run and are managed. This framework implements the concept that Android applications are constructed from reusable, interchangeable and replaceable components. This concept is taken a step further in that an application is also able to publish its capabilities along with any corresponding data so that they can be found and reused by other applications.\n\n The Android framework includes the following key services:\n</string>
    <string name="architecture_tv13">      1. Activity Manager – Controls all aspects of the application lifecycle and activity stack.\n\n      2. Content Providers – Allows applications to publish and share data with other applications.\n\n      3. Resource Manager – Provides access to non-code embedded resources such as strings, color settings and user interface layouts.\n\n        4. Notifications Manager – Allows applications to display alerts and notifications to the user.\n\n      5. View System – An extensible set of views used to create application user interfaces.\n\n        6. Package Manager – The system by which applications are able to find out information about other applications currently installed on the device.\n\n      7. Telephony Manager – Provides information to the application about the telephony services available on the device such as status and subscriber information.\n\n      8. Location Manager – Provides access to the location services allowing an application to receive updates about location changes.</string>
    <string name="architecture_tv14">Applications</string>
    <string name="architecture_tv15">      On the top of android framework, there are applications. All applications such as home, contact, settings, games, browsers are using android framework that uses android runtime and libraries. Android runtime and native libraries are using linux kernal.</string>

    <string name="IDE_tv1">Android Studio IDE</string>
    <string name="IDE_tv2">Android Studio is the official Integrated Development Environment (IDE) for Android application development, based on IntelliJ IDEA .</string>
    <string name="IDE_tv3">Manifest Folder: This folder consists of a manifest.xml file which android system requires for all the essential information of the application, like:\n       Package Name : Unique Identifier of the application\n      Components : We have to describe all the components in the application(We will discuss components in upcoming chapters)\n     Permissions : Describe all permission application will require.</string>
    <string name="IDE_tv4">0</string>
    <string name="IDE_tv5">Java Folder : Here you will have all your Java and Kotlin files.\nRes Folder : This folder consists of all the media requirements of application like screen layouts inside the layout, images inside drawable, fonts, colour, strings and dimension will be inside values</string>
    <string name="IDE_tv6">User Interface of IDE</string>
    <string name="IDE_tv7">     1. Toolbar : All necessary actions like copy, paste, find etc. with the run application, open SDK manager and other tools\n     2. Navigation Bar : This shows you the path of the file you are working on\n    3. Editor Window : This is the screen where you have all your files open, and you can write code, design layouts etc. depending upon the file type\n     4.Tool Window Bar : This is the window consists of multiple options which you can expand on clicking on it.\n     5. Tool Window : Here you will see the option you had selected in Tool Window Bar.\n     6. Status Bar : Here you can check your project status.</string>
    <string name="IDE_tv8">Gradle Build System</string>
    <string name="IDE_tv9">     In Android Studio, Gradle is a custom build tool used to build APK files, by managing dependencies and providing custom build logic.\n     APK file (Android Application Package) is a specially formatted zip file which consists of Bytecode, Resources (images, UI, XML etc.)\n     In this chapter, you read about all the initial details of the Android Studio IDE. This IDE consists of many features which will make your journey as an Android Developer more comfortable. We will be going to discuss more features one by one in upcoming chapters.</string>

    <string name="component_tv1">Application Components</string>
    <string name="component_tv2">The android application components or core building blocks are the basic building blocks of an android application and these components will allow system or user to access our app.\n\n The followings are the basic core building blocks of android application components that can be used in Android application:\n    1. Activities\n    2. Intent\n    3. Services\n    4. Broadcast Receivers\n    5. Content providers</string>
    <string name="component_tv3">Activities</string>
    <string name="component_tv4">Activity represents a single screen with a user interface (UI) and it is act as a entry point for users to interact with app.\n\n For example, a contacts app which has multiple activities like displaying a list of contacts, add new contact and another activity shows to search for the contacts in the contacts list of an app. All activities of a contacts app are independent to each other but these activities work together to provide a better user experience.</string>
    <string name="component_tv5">Intents</string>
    <string name="component_tv6">An intent is a messaging object which is used to request an action from another component.\n\nIt is mainly used to perform following things: \n    1. Start an Activity\n    2. Start a Service\n    3. Deliver a Broadcast\n    4. Display a Webpage etc.\n\nThere are two types of intents in android as follows:\n    1. Implicit Intents\n    2. Explicit Intents</string>
    <string name="component_tv7">Services</string>
    <string name="component_tv8">Service is a component which is a background process to perform long running operations based on our requirements. Service have not any user interface(UI) and it can run the apps in background for a long time like play music in background when the user in different app.\n\nWe have two types of services available in android as follows:\n    1. Local Services\n    2. Remote Services\n\nLocal service is a service which is accessed from within the application whereas remote service is a service which is accessed remotely from other applications running on the same device.</string>
    <string name="component_tv9">Broadcast Receivers</string>
    <string name="component_tv10">Broadcast Receivers is a component which allows a system to deliver events to the app like listening for Incoming call, sms, sending a low battery message to the app etc. The apps can also initiate broadcasts to let other apps know that required data available in a device to use it. It is used to handle communication between Android operating system and applications.\n\nGenerally, we use Intents to deliver broadcast events to other applications and Broadcast Receivers use status bar notifications to let user know that broadcast event occurs</string>
    <string name="component_tv11">Content Providers</string>
    <string name="component_tv12">Content Providers are used to exchange the data between the applications based on the requests. The Content Providers can share the app data that store in the file system, SQLite Database, on the web or any other storage location that our application can access. \n\nBy using Content Providers, other applications can query or modify the data of our application based on the permissions provided by content providers. For example, android provides a Content Provider (ContactsContract.Data) to manage contacts information, by using proper permissions any app can query the content provider to perform read and write operations on contacts information.</string>

    <string name="manifest_tv1">Manifest File</string>
    <string name="manifest_tv2">Today, I would like to help you understand the Android Application Manifest File as an android developer. Each android application you build will include a file called AndroidManifest.xml which is placed in the root of the project hierarchy. So why is it important? Because it lets you define the structure and metadata of your android application and its components.\n\nThe Android Application Manifest file includes nodes for each of the following components:\n    1. Activities\n    2. Services\n    3. Content providers\n    4. Broadcast Receivers\n\n that make up your application and uses Intent Filters and Permissions to determine how they interact with each other and other applications. It also offers you attributes that you can use to specify application metadata like icon and theme among other things.\n\n The Android Application Manifest file is made up of a root manifest tag with a package attribute set to the project’s package. It normally includes an xmlns:android attribute that supplies several system attributes used within the android application manifest file.</string>
    <string name="manifest_tv3">Android Application Manifest Node Tags</string>
    <string name="manifest_tv4">1. application : A manifest can contain only one application node. This uses attributes to specify the metadata for your android application(title, icon and theme). Besides that, it acts as a container that includes the Activity, Service, Content Provider and Broadcast Receiver tags for specifying the application components:\n\n     Activity : For every activity displayed by your android application, an activity tag is required. You set it using android:name attribute to specify the class name. It must include the main launch Activity and any other screen or dialog that can be displayed. If you try to start an Activity that is not defined, you will get a runtime exception. Each Activity node supports intent-filter child tags which specify which Intents launch the activity.\n\n     Service : Just like the activity tag, you must create a new service for each Service class used inside your application. Service tags also support intent-filter child tags to allow late runtime binding.\n\n     Provider : provider tags are used for each of your application Content Providers. Content Providers are used to manage database access and sharing within and between applications.\n\n     Receiver : You can register a Broadcast Receiver by adding a receiver tag without having to launch your application first. Broadcast Receivers are more like global event listeners – once registered, they will execute whenever a matching Intent is broadcast by an application.</string>
    <string name="manifest_tv5">Application Components</string>
    <string name="manifest_tv6">Application Components</string>
    <string name="manifest_tv7">Application Components</string>
    <string name="manifest_tv8">Application Components</string>
    <string name="manifest_tv9">Application Components</string>
    <string name="manifest_tv10">Application Components</string>


    <string name="uilayout_tv1">Android UI Layouts</string>
    <string name="uilayout_tv2">    The basic building block for android user interface(UI) is a View object which is created from the View class and it is occupied in rectangular area on the screen and it is responsible for interacting with user, drawing and event handling. View is the base class for widgets, which are used to create interactive user interface(UI) components like buttons, check box, text fields, etc.</string>
    <string name="uilayout_tv3">Views and ViewGroups</string>
    <string name="uilayout_tv4">    An Activity contains Views and ViewGroups. In android a View is a widget that visible on screen. Examples of widgets are buttons, labels, check box, text boxes, etc. A View derives from the base class android.view.View. The ViewGroup is a subclass of View and it provides invisible container that hold the other Views or the other ViewGroups and define their layout properties.</string>
    <string name="uilayout_tv5">    At third stage we have different layouts which are subclasses of ViewGroup class and for an user interface(UI) a typical layout defines the visual structure and can be created either at run time using View or ViewGroup objects or you can also declare your layout using simple XML file activity_main_layout.xml which is located in the res/layout folder of your project.</string>
    <string name="uilayout_tv6">Layouts</string>
    <string name="uilayout_tv7">    Android user interface(UI) Layout in which you can use in almost all the Android applications to provide different view, look and feel. The  seven different  Layouts are:-</string>
    <string name="uilayout_tv8">
    1.Linear Layout
    2.Relative Layout
    3.Absolute Layout
    4.Table Layout
    5.Frame Layout
    6.List view
    7.Grid view</string>
    <string name="uilayout_tv9">1.Linear Layout</string>
    <string name="uilayout_tv10">In Android a LinearLayout is a view group that aligns all the children in a single direction may be horizontally or vertically. And it also supports assigning a weight to individual children with the android:layout_weight attribute. Either Horizontally or Vertically orientation and this behavior is set in android:orientation which is an attribute of the node LinearLayout.</string>
    <string name="uilayout_tv11">Horizontal layout xml snippet</string>
    <string name="uilayout_tv12">  horizontal Layout Snippet code</string>
    <string name="uilayout_tv13">  Vertical layout xml snippet</string>
    <string name="uilayout_tv14">  Vertical Layout Snippet code </string>

    <string name="uilayout_tv15">2.Relative Layout</string>
    <string name="uilayout_tv16">RelativeLayout is a view group which specifies how child views are positioned relatively to each other. Then each view positioned as relative to sibling elements. you can use like some attributes "below, above, right and left" to arrange the component position.</string>
    <string name="uilayout_tv17">RelativeLayout xml snippet</string>
    <string name="uilayout_tv18">RelativeLayout xml snippet code </string>


    <string name="uilayout_tv19">3.Table Layout</string>
    <string name="uilayout_tv20">TableLayout is a layout which groups views into rows and columns.
And it is very easy to understand.</string>
    <string name="uilayout_tv21">Table Layout xml snippet</string>
    <string name="uilayout_tv22">Table Layout xml snippet code </string>


    <string name="uilayout_tv23">4.Absolute Layout</string>
    <string name="uilayout_tv24">AbsoluteLayout is a layout which allows you to specify the exact location of its children. It is less flexible and harder to maintain than other types of layouts without absolute positioning.</string>
    <string name="uilayout_tv25">Absolute Layout xml snippet</string>
    <string name="uilayout_tv26">Absolute  Layout xml snippet code </string>




    <string name="uilayout_tv27">5.Frame Layout</string>
    <string name="uilayout_tv28">The FrameLayout is a layout in which a placeholder on a screen that you can use to display a single view.</string>
    <string name="uilayout_tv29">FrameLayout xml snippet</string>
    <string name="uilayout_tv30">Frame  Layout xml snippet code </string>



    <string name="uilayout_tv31">6.ListView</string>
    <string name="uilayout_tv32">Listview is a view group that displays a list of scrollable items on a screen. The list items are automatically inserted to the list using an adapter that pulls the content from a source such as an array or database query and converts each item result into a view that's placed into the list.</string>
    <string name="uilayout_tv33">ListView xml snippet</string>
    <string name="uilayout_tv34">List View xml snippet code </string>






</resources>